{"version":3,"sources":["entities/task/ui/task-card/styles.module.scss","entities/task/ui/task-row/styles.module.scss","features/toggle-task/model/toggle-task.ts","features/toggle-task/ui.tsx","pages/tasks-list/styles.module.scss","features/tasks-filters/config.ts","features/tasks-filters/ui.tsx","pages/tasks-list/index.tsx","entities/task/ui/task-card/index.tsx","entities/task/ui/task-row/index.tsx","shared/config/index.ts","shared/api/typicode/base.ts","shared/api/typicode/tasks.ts","entities/task/model/tasks.ts","entities/task/lib.ts"],"names":["module","exports","toggleTask","createEvent","taskModel","$tasks","on","state","taskId","produce","draft","task","completed","events","ToggleTask","withStatus","selectors","useTask","status","taskLib","getTaskStatus","onClick","toggleTaskModel","checked","filters","id","title","config","filtersList","Object","values","TasksFilters","reflect","view","loading","onFilterClick","Group","defaultValue","buttonStyle","map","Button","getFilterById","value","disabled","bind","$tasksListLoading","setQueryConfig","TasksList","list","span","data","titleHref","before","source","$tasksFiltered","mapItem","PageContent","variant","combine","isLoading","isEmpty","$tasksListEmpty","cases","size","empty","description","ready","hooks","mounted","effects","getTasksListFx","prepend","TasksListPage","className","styles","root","toolbar","justify","Title","level","Content","content","gutter","TaskCard","children","cardProps","to","TaskRow","cn","getEnvVar","key","undefined","process","Error","API_URL","apiInstance","axios","create","baseURL","BASE_URL","getTasksList","params","get","getTaskById","createEffect","typicodeApi","tasks","getTaskByIdFx","taskSchema","schema","Entity","normalizeTask","normalize","normalizeTasks","tasksInitialState","createStore","doneData","_","payload","entities","$queryConfig","pending","$taskDetailsLoading","$tasksList","tasksList","filter","length","useStore"],"mappings":"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","file":"static/js/6.b08a67d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root___dqf0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__2zmhi\",\"completed\":\"styles_completed__1vJ92\"};","import { createEvent } from \"effector\";\r\nimport produce from \"immer\";\r\n\r\nimport { taskModel } from \"entities/task\";\r\n\r\nconst toggleTask = createEvent<number>();\r\n\r\ntaskModel.$tasks.on(toggleTask, (state, taskId) =>\r\n  produce(state, (draft) => {\r\n    const task = draft[taskId];\r\n    task.completed = !task.completed;\r\n  })\r\n);\r\n\r\nexport const events = { toggleTask };\r\n","import { Checkbox } from \"antd\"; // ~ \"shared/ui/checkbox\"\r\n\r\nimport { taskModel, taskLib } from \"entities/task\";\r\nimport * as toggleTaskModel from './model';\r\n\r\nexport type ToggleTaskProps = {\r\n    taskId: number;\r\n    withStatus?: boolean;\r\n}\r\n\r\n// resolve / unresolve\r\nexport const ToggleTask = ({ taskId, withStatus = true }: ToggleTaskProps) => {\r\n    const task = taskModel.selectors.useTask(taskId);\r\n\r\n    if (!task) return null;\r\n\r\n    const status = taskLib.getTaskStatus(task);\r\n\r\n    return (\r\n        <Checkbox\r\n            onClick={() => toggleTaskModel.events.toggleTask(taskId)}\r\n            checked={task.completed}\r\n        >\r\n            {withStatus && status}\r\n        </Checkbox>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__2xBs6\",\"toolbar\":\"styles_toolbar__XbG9C\",\"content\":\"styles_content__l0uG9\"};","export type Filter = {\r\n    id: number;\r\n    title: string;\r\n    config: import(\"entities/task\").taskModel.QueryConfig;\r\n}\r\n\r\n// Описываем здесь датасет фильтров \"Закрытые\" / \"Открытые\" и т.п.\r\nexport const filters: Record<number, Filter> = {\r\n    1: {\r\n        id: 1,\r\n        title: \"All\",\r\n        config: {},\r\n    },\r\n    2: {\r\n        id: 2,\r\n        title: \"Opened\",\r\n        config: { completed: false },\r\n    },\r\n    3: {\r\n        id: 3,\r\n        title: \"Closed\",\r\n        config: { completed: true },\r\n    },\r\n};\r\n\r\nexport const DEFAULT_FILTER = 1;\r\n\r\nexport const filtersList = Object.values(filters);\r\n\r\nexport const getFilterById = (id: number) => filters[id];\r\n","import { Radio } from \"antd\"; // ~ \"shared/ui/radio\"\r\nimport { reflect } from \"@effector/reflect\";\r\n\r\nimport { taskModel } from \"entities/task\";\r\nimport { filtersList, getFilterById, DEFAULT_FILTER } from \"./config\";\r\n\r\ntype Props = {\r\n  loading: boolean;\r\n  onFilterClick: (p: taskModel.QueryConfig) => void;\r\n};\r\n\r\nconst View = ({ loading, onFilterClick }: Props) => {\r\n  return (\r\n    <Radio.Group defaultValue={DEFAULT_FILTER} buttonStyle=\"solid\">\r\n      {filtersList.map(({ title, id }) => (\r\n        <Radio.Button\r\n          key={id}\r\n          onClick={() => onFilterClick(getFilterById(id).config)}\r\n          value={id}\r\n          disabled={loading}\r\n        >\r\n          {title}\r\n        </Radio.Button>\r\n      ))}\r\n    </Radio.Group>\r\n  );\r\n};\r\n\r\n// Использование effector-reflect здесь опционально и некритично в рамках методологии\r\nexport const TasksFilters = reflect({\r\n  view: View,\r\n  bind: {\r\n    loading: taskModel.$tasksListLoading,\r\n    onFilterClick: taskModel.events.setQueryConfig,\r\n  },\r\n});\r\n","import { Layout, Row, Col, Typography, Spin, Empty } from \"antd\"; // ~ \"shared/ui/{...}\"\r\nimport { variant, list } from \"@effector/reflect\";\r\nimport { combine } from \"effector\";\r\n\r\nimport { TasksFilters } from \"features/tasks-filters\";\r\nimport { ToggleTask } from \"features/toggle-task\";\r\nimport { TaskRow, taskModel } from \"entities/task\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst TasksListPage = () => {\r\n  return (\r\n    <Layout className={styles.root}>\r\n      <Layout className={styles.toolbar}>\r\n        {/* ~ Layout.Toolbar */}\r\n        <Row justify=\"center\">\r\n          <Typography.Title level={1}>Tasks List</Typography.Title>\r\n        </Row>\r\n        <Row justify=\"center\">\r\n          <TasksFilters />\r\n        </Row>\r\n      </Layout>\r\n      <Layout.Content className={styles.content}>\r\n        <Row gutter={[0, 20]} justify=\"center\">\r\n          <PageContent />\r\n        </Row>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst ListItemView: React.FC<{ task: import(\"shared/api\").Task }> = ({\r\n  task,\r\n}) => {\r\n  return (\r\n    <Col key={task.id} span={24}>\r\n      <TaskRow\r\n        data={task}\r\n        titleHref={`/${task.id}`}\r\n        before={<ToggleTask taskId={task.id} withStatus={false} />}\r\n      />\r\n    </Col>\r\n  );\r\n};\r\n\r\n// Использование effector-reflect здесь опционально и некритично в рамках методологии\r\nconst TasksList = list({\r\n  view: ListItemView,\r\n  source: taskModel.$tasksFiltered,\r\n  bind: {},\r\n  mapItem: {\r\n    task: (task) => task,\r\n  },\r\n});\r\n// Использование effector-reflect здесь опционально и некритично в рамках методологии\r\nconst PageContent = variant({\r\n  source: combine(\r\n    {\r\n      isLoading: taskModel.$tasksListLoading,\r\n      isEmpty: taskModel.$tasksListEmpty,\r\n    },\r\n    ({ isLoading, isEmpty }) => {\r\n      if (isLoading) return \"loading\";\r\n      if (isEmpty) return \"empty\";\r\n      return \"ready\";\r\n    }\r\n  ),\r\n  cases: {\r\n    loading: () => <Spin size=\"large\" />,\r\n    empty: () => <Empty description=\"No tasks found\" />,\r\n    ready: TasksList,\r\n  },\r\n  hooks: {\r\n    mounted: taskModel.effects.getTasksListFx.prepend(() => {}),\r\n  },\r\n});\r\n\r\nexport default TasksListPage;\r\n","import type { PropsWithChildren } from \"react\";\r\nimport { Card } from \"antd\"; // ~ \"shared/ui/card\"\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nexport type TaskCardProps = PropsWithChildren<{\r\n    data?: import(\"shared/api\").Task;\r\n    titleHref?: string;\r\n}> & import(\"antd\").CardProps;\r\n\r\nexport const TaskCard = ({ data, titleHref, children, ...cardProps }: TaskCardProps) => {\r\n    // Можно обработать и получше при желании\r\n    if (!data && !cardProps.loading) return null;\r\n\r\n    return (\r\n        <Card\r\n            // Можно обработать и получше при желании\r\n            title={`Task#${cardProps.loading ? \"\" : data?.id}`}\r\n            className={styles.root}\r\n            {...cardProps}\r\n        >\r\n            {titleHref ? <Link to={titleHref}>{data?.title}</Link> : data?.title}\r\n            {children}\r\n        </Card>\r\n    );\r\n};\r\n","import type { PropsWithChildren, ReactNode } from \"react\";\r\nimport cn from \"classnames\"; // Можно смело использовать аналоги\r\nimport { Row } from \"antd\"; // ~ \"shared/ui/row\"\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nexport type TaskRowProps = PropsWithChildren<{\r\n  data: import(\"shared/api\").Task;\r\n  titleHref?: string;\r\n  before?: ReactNode;\r\n}>;\r\n\r\nexport const TaskRow = ({ data, before, titleHref }: TaskRowProps) => {\r\n  const title = titleHref ? <Link to={\"/payments\"}>Payments</Link> : data.title;\r\n\r\n  return (\r\n    // Можно смело использовать classnames и аналоги\r\n    <Row className={cn(styles.root, { [styles.completed]: data.completed })}>\r\n      {before}\r\n      {title}\r\n    </Row>\r\n  );\r\n};\r\n","/**\r\n * Модуль инициализации env-переменных\r\n * @remark Если не найдено значение хоть одной переменной,\r\n * Приложение сразу выбросит ошибку, при инициализации модуля\r\n * @module\r\n */\r\n\r\n/**\r\n * Получение env-переменной\r\n * @throwable\r\n */\r\n const getEnvVar = (key: string) => {\r\n    if (process.env[key] === undefined) {\r\n        throw new Error(`Env variable ${key} is required`);\r\n    }\r\n    return process.env[key] || \"\";\r\n};\r\n\r\n/** API entrypoint */\r\nexport const API_URL = getEnvVar(\"REACT_APP_API_URL\");\r\n\r\n/** Режим запуска программы */\r\nexport const NODE_ENV = getEnvVar(\"NODE_ENV\");\r\n/** Режим разработки */\r\nexport const isDevEnv = NODE_ENV === \"development\";\r\n/** Режим продакшена */\r\nexport const isProdEnv = NODE_ENV === \"production\";\r\n","import axios from \"axios\";\r\nimport { API_URL } from \"shared/config\";\r\n\r\n// Потенциально, можно передавать accessToken\r\nexport const apiInstance = axios.create({\r\n    baseURL: API_URL\r\n});\r\n","import type { AxiosPromise } from \"axios\";\r\nimport { apiInstance } from \"./base\";\r\nimport type { Task } from \"./models\";\r\n\r\nconst BASE_URL = \"/todos\"\r\n\r\nexport type GetTasksListParams = {\r\n    userId?: number;\r\n    completed?: boolean;\r\n};\r\n\r\nexport const getTasksList = (params?: GetTasksListParams): AxiosPromise<Task[]> => {\r\n    return apiInstance.get(BASE_URL, { params });\r\n};\r\n\r\nexport type GetTaskByIdParams = {\r\n    taskId: number;\r\n    [x: string]: any;\r\n};\r\n\r\nexport const getTaskById = ({ taskId, ...params }: GetTaskByIdParams): AxiosPromise<Task> => {\r\n    return apiInstance.get(`${BASE_URL}/${taskId}`, { params });\r\n};\r\n","import { createStore, combine, createEffect, createEvent } from \"effector\";\r\nimport { useStore } from \"effector-react\";\r\nimport { normalize, schema } from \"normalizr\";\r\n\r\nimport { typicodeApi } from \"shared/api\";\r\nimport type { Task } from \"shared/api\";\r\n\r\nexport type QueryConfig = {\r\n  completed?: boolean;\r\n  userId?: number;\r\n};\r\n\r\n\r\nconst setQueryConfig = createEvent<QueryConfig>();\r\n\r\n\r\n// В каждом эффекте так же может быть своя доп. обработка\r\nconst getTasksListFx = createEffect((params?: typicodeApi.tasks.GetTasksListParams) => {\r\n  return typicodeApi.tasks.getTasksList(params);\r\n});\r\nconst getTaskByIdFx = createEffect((params: typicodeApi.tasks.GetTaskByIdParams) => {\r\n  return typicodeApi.tasks.getTaskById(params);\r\n});\r\n\r\n\r\n// Можно вынести нормализацию на уровне API\r\nexport const taskSchema = new schema.Entity(\"tasks\");\r\nexport const normalizeTask = (data: Task) => normalize(data, taskSchema);\r\nexport const normalizeTasks = (data: Task[]) => normalize(data, [taskSchema]);\r\n\r\n\r\n// В рамках демо некритично, но можно хранить и в виде массива без нормализации\r\nexport const tasksInitialState: Record<number, Task> = {};\r\nexport const $tasks = createStore(tasksInitialState)\r\n  .on(getTasksListFx.doneData, (_, payload) => normalizeTasks(payload.data).entities.tasks)\r\n  .on(getTaskByIdFx.doneData, (state, payload) => ({\r\n    ...state,\r\n    ...normalizeTask(payload.data).entities.tasks,\r\n  }))\r\n\r\n\r\n// Можно вынести в отдельную директорию (для хранения нескольких моделей)\r\nexport const $queryConfig = createStore<QueryConfig>({})\r\n  .on(setQueryConfig, (_, payload) => payload)\r\n\r\n// Можно добавить потенциально debounce логику\r\nexport const $tasksListLoading = getTasksListFx.pending;\r\nexport const $taskDetailsLoading = getTaskByIdFx.pending;\r\n\r\n\r\n/**\r\n * \"Список\" задач\r\n */\r\nexport const $tasksList = combine($tasks, (tasks) => Object.values(tasks));\r\n\r\n/**\r\n * Отфильтрованные таски\r\n * @remark Можно разруливать на уровне эффектов - но тогда нужно подключать дополнительную логику в стор\r\n * > Например скрывать/показывать таск при `toggleTask` событии\r\n */\r\nexport const $tasksFiltered = combine(\r\n  $tasksList,\r\n  $queryConfig,\r\n  (tasksList, config) => {\r\n    return tasksList.filter(task => (\r\n      config.completed === undefined ||\r\n      task.completed === config.completed\r\n  ))},\r\n);\r\n\r\nexport const $tasksListEmpty = $tasksFiltered.map((list) => list.length === 0);\r\n\r\n// При желании можно завести отдельный селектор, не завязанный на react биндинги\r\nconst useTask = (taskId: number): import(\"shared/api\").Task | undefined => {\r\n  return useStore($tasks)[taskId];\r\n};\r\n\r\nexport const events = { setQueryConfig };\r\n\r\nexport const effects = {\r\n  getTaskByIdFx,\r\n  getTasksListFx,\r\n};\r\n\r\nexport const selectors = {\r\n  useTask,\r\n};\r\n","import type { Task } from \"shared/api\";\r\n\r\nexport const getTaskStatus = (data: Task) => {\r\n    return data.completed ? \"CLOSED\" : \"OPENED\";\r\n};\r\n"],"sourceRoot":""}